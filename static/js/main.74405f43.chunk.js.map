{"version":3,"sources":["pages/MovieList.js","pages/Movie.js","pages/Graph.js","App.js","reportWebVitals.js","index.js"],"names":["MovieList","movies","date","className","map","rank","movieNm","audiCnt","salesAmt","salesShare","movieCd","Movie","useState","setDate","dataArr","setDataArr","useEffect","axiosEvent","a","axios","get","then","response","data","boxOfficeResult","dailyBoxOfficeList","localStorage","gData","JSON","stringify","type","onChange","e","ymd","target","value","split","href","rel","Graph","parse","graphData","setGraphData","graphData2","setGraphData2","obj","style","height","keys","indexBy","margin","top","right","bottom","left","padding","valueScale","indexScale","round","colors","scheme","defs","id","background","color","size","stagger","rotation","lineWidth","spacing","fill","match","borderColor","from","modifiers","axisTop","axisRight","axisBottom","tickSize","tickPadding","tickRotation","legend","legendPosition","legendOffset","axisLeft","labelSkipWidth","labelSkipHeight","labelTextColor","legends","dataFrom","anchor","direction","justify","translateX","translateY","itemsSpacing","itemWidth","itemHeight","itemDirection","itemOpacity","symbolSize","effects","on","innerRadius","padAngle","cornerRadius","activeOuterRadiusOffset","borderWidth","arcLinkLabelsSkipAngle","arcLinkLabelsTextColor","arcLinkLabelsThickness","arcLinkLabelsColor","arcLabelsSkipAngle","arcLabelsTextColor","itemTextColor","symbolShape","App","titleUpdater","initialTitle","title","setTitle","document","querySelector","innerText","useTitle","setTimeout","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"wSAEe,SAASA,EAAT,GAAqC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACxC,OACI,qCACI,kDAAqBA,EAArB,OACA,wBAAOC,UAAU,iBAAjB,UACI,gCACI,+BACI,2DACA,0DACA,iEACA,iEACA,iHAGR,gCACKF,EAAOG,KAAI,SAAAH,GACR,OACI,+BACI,6BAAKA,EAAOI,OACZ,6BAAKJ,EAAOK,UACZ,6BAAKL,EAAOM,UACZ,6BAAKN,EAAOO,WACZ,6BAAKP,EAAOQ,eALPR,EAAOS,oBCd7B,SAASC,IAEpB,MAAwBC,mBAAS,YAAjC,mBAAOV,EAAP,KAAaW,EAAb,KACA,EAA6BD,mBAAS,IAAtC,mBAAOE,EAAP,KAAeC,EAAf,KA0BA,OAnBAC,qBAAU,WACN,IAAMC,EAAU,uCAAG,sBAAAC,EAAA,sEACTC,IAAMC,IAAI,8IAA8IlB,GAC7JmB,MAAK,SAAAC,GACFP,EAAWO,EAASC,KAAKC,gBAAgBC,oBACzCC,aAAaC,MAAQC,KAAKC,UAAUP,EAASC,KAAKC,gBAAgBC,uBAJvD,2CAAH,qDAahBR,MACA,CAACf,IAKD,oCACI,4CAAmB,uBACnB,uBAAO4B,KAAK,OAAOC,SA3B3B,SAAoBC,GAChB,IAAIC,EAAID,EAAEE,OAAOC,MAAMC,MAAM,KAC7BvB,EAAQoB,EAAI,GAAGA,EAAI,GAAGA,EAAI,OAyB2B,uBACjD,mBAAGI,KAAK,8EAA8EH,OAAO,SAASI,IAAI,aAAanC,UAAU,cAAjI,gCA2FA,cAACH,EAAD,CAAWC,OAAQa,EAASZ,KAAMA,O,sBC5H/B,SAASqC,IACpB,MAAiC3B,mBAASgB,KAAKY,MAAMd,aAAaC,QAAlE,mBAAOc,EAAP,KAAiBC,EAAjB,KACA,EAAmC9B,mBAASgB,KAAKY,MAAMd,aAAaC,QAApE,mBAAOgB,EAAP,KAAkBC,EAAlB,KAmBA,OAlBA5B,qBAAU,WACN0B,EACID,EAAUrC,KAAI,SAASyC,GACnB,MAAQ,CACJ,QAAUA,EAAIvC,QACd,MAAQuC,EAAItC,aAIxBqC,EACID,EAAWvC,KAAI,SAASyC,GACpB,MAAO,CACH,GAAKA,EAAIvC,QACT,MAAQuC,EAAIpC,kBAI1B,CAACiB,aAAaC,QAEZ,oCACI,4CACA,qBAAKxB,UAAU,WAAf,SACI,sBAAKA,UAAU,iBAAiB2C,MAAO,CAACC,OAAO,QAA/C,UACI,cAAC,IAAD,CACIxB,KAAMkB,EACNO,KAAM,CAAE,UAAW,SAAU,WAAY,QAAS,QAAS,SAC3DC,QAAQ,UACRC,OAAQ,CAAEC,IAAK,GAAIC,MAAO,IAAKC,OAAQ,GAAIC,KAAM,IACjDC,QAAS,GACTC,WAAY,CAAE1B,KAAM,UACpB2B,WAAY,CAAE3B,KAAM,OAAQ4B,OAAO,GACnCC,OAAQ,CAAEC,OAAQ,SAClBC,KAAM,CACF,CACIC,GAAI,OACJhC,KAAM,cACNiC,WAAY,UACZC,MAAO,UACPC,KAAM,EACNV,QAAS,EACTW,SAAS,GAEb,CACIJ,GAAI,QACJhC,KAAM,eACNiC,WAAY,UACZC,MAAO,UACPG,UAAW,GACXC,UAAW,EACXC,QAAS,KAGjBC,KAAM,CACF,CACIC,MAAO,CACHT,GAAI,SAERA,GAAI,QAER,CACIS,MAAO,CACHT,GAAI,YAERA,GAAI,UAGZU,YAAa,CAAEC,KAAM,QAASC,UAAW,CAAE,CAAE,SAAU,OACvDC,QAAS,KACTC,UAAW,KACXC,WAAY,CACRC,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,QACRC,eAAgB,SAChBC,aAAc,IAElBC,SAAU,CACNN,SAAU,EACVC,YAAa,EACbC,aAAc,EACdC,OAAQ,qBACRC,eAAgB,SAChBC,cAAe,IAEnBE,eAAgB,GAChBC,gBAAiB,GACjBC,eAAgB,CAAEd,KAAM,QAASC,UAAW,CAAE,CAAE,SAAU,OAC1Dc,QAAS,CACL,CACIC,SAAU,OACVC,OAAQ,eACRC,UAAW,SACXC,SAAS,EACTC,WAAY,IACZC,WAAY,EACZC,aAAc,EACdC,UAAW,IACXC,WAAY,GACZC,cAAe,gBACfC,YAAa,IACbC,WAAY,GACZC,QAAS,CACL,CACIC,GAAI,QACJxD,MAAO,CACHqD,YAAa,SAOrC,cAAC,IAAD,CACI5E,KAAMoB,EACNO,OAAQ,CAAEC,IAAK,GAAIC,MAAO,GAAIC,OAAQ,GAAIC,KAAM,IAChDiD,YAAa,GACbC,SAAU,GACVC,aAAc,EACdC,wBAAyB,EACzBC,YAAa,EACbnC,YAAa,CAAEC,KAAM,QAASC,UAAW,CAAE,CAAE,SAAU,MACvDkC,uBAAwB,GACxBC,uBAAuB,UACvBC,uBAAwB,EACxBC,mBAAoB,CAAEtC,KAAM,SAC5BuC,mBAAoB,GACpBC,mBAAoB,CAAExC,KAAM,QAASC,UAAW,CAAE,CAAE,SAAU,KAC9Db,KAAM,CACF,CACIC,GAAI,OACJhC,KAAM,cACNiC,WAAY,UACZC,MAAO,2BACPC,KAAM,EACNV,QAAS,EACTW,SAAS,GAEb,CACIJ,GAAI,QACJhC,KAAM,eACNiC,WAAY,UACZC,MAAO,2BACPG,UAAW,GACXC,UAAW,EACXC,QAAS,KAGjBC,KAAM,CACF,CACIC,MAAO,CACHT,GAAI,QAERA,GAAI,QAER,CACIS,MAAO,CACHT,GAAI,KAERA,GAAI,QAER,CACIS,MAAO,CACHT,GAAI,MAERA,GAAI,QAER,CACIS,MAAO,CACHT,GAAI,UAERA,GAAI,QAER,CACIS,MAAO,CACHT,GAAI,SAERA,GAAI,SAER,CACIS,MAAO,CACHT,GAAI,QAERA,GAAI,SAER,CACIS,MAAO,CACHT,GAAI,UAERA,GAAI,SAER,CACIS,MAAO,CACHT,GAAI,cAERA,GAAI,UAGZ0B,QAAS,CACL,CACIE,OAAQ,SACRC,UAAW,MACXC,SAAS,EACTC,WAAY,EACZC,WAAY,GACZC,aAAc,EACdC,UAAW,IACXC,WAAY,GACZiB,cAAe,OACfhB,cAAe,gBACfC,YAAa,EACbC,WAAY,GACZe,YAAa,SACbd,QAAS,CACL,CACIC,GAAI,QACJxD,MAAO,CACHoE,cAAe,sBC5L5CE,MA/Bf,WAEE,IAUMC,EAVW,SAACC,GAChB,MAA0B1G,mBAAS0G,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KAMA,OADAxG,qBAJoB,WACAyG,SAASC,cAAc,SAC/BC,UAAYJ,IAED,CAACA,IACjBC,EAGYI,CAAS,cAG9B,OAFAC,YAAW,kBAAMR,EAAa,WAAU,KAGtC,eAAC,IAAD,WACE,iCACE,gCACE,cAAC,IAAD,CAAMS,GAAG,IAAT,mBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,wBAGJ,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,cAAuB,cAACrH,EAAD,IAAvB,OACA,eAAC,IAAD,CAAOqH,KAAK,SAAZ,cAAsB,cAACzF,EAAD,IAAtB,cCnBO0F,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqB9G,MAAK,YAAkD,IAA/C+G,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFlB,SAASmB,eAAe,SAM1BX,M","file":"static/js/main.74405f43.chunk.js","sourcesContent":["// MovieList.js\r\n\r\nexport default function MovieList({ movies, date }){\r\n    return( \r\n        <>\r\n            <h3>MovieList Page ({date})</h3>\r\n            <table className=\"movieListTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>당일 순위</th>\r\n                        <th>영화제목</th>\r\n                        <th>당일 관객수</th>\r\n                        <th>당일 매출액</th>\r\n                        <th>당일 매출총액대비 매출비율</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {movies.map(movies => {\r\n                        return(\r\n                            <tr key={movies.movieCd}>\r\n                                <td>{movies.rank}</td>\r\n                                <td>{movies.movieNm}</td>\r\n                                <td>{movies.audiCnt}</td>\r\n                                <td>{movies.salesAmt}</td>\r\n                                <td>{movies.salesShare}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n","// Movie.js\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from 'axios'; \r\nimport MovieList from \"./MovieList\";\r\n\r\nexport default function Movie(){\r\n    \r\n    const [date, setDate] = useState('20210901');\r\n    const [dataArr,setDataArr] = useState([]);\r\n\r\n    function selectDate(e){\r\n        let ymd=e.target.value.split(\"-\");\r\n        setDate(ymd[0]+ymd[1]+ymd[2]);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        const axiosEvent = async () => {\r\n            await axios.get('https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=cad9be1865105b37c7878f3391f806e8&targetDt='+date)\r\n            .then(response=>{\r\n                setDataArr(response.data.boxOfficeResult.dailyBoxOfficeList);\r\n                localStorage.gData = JSON.stringify(response.data.boxOfficeResult.dailyBoxOfficeList);\r\n            })\r\n/* \r\n            .catch(function (error) {\r\n                // 오류발생시 실행\r\n                // https://wonit.tistory.com/305\r\n            })\r\n */\r\n        }\r\n        axiosEvent();\r\n    },  [date]);\r\n\r\n    //console.log(dataArr)\r\n\r\n    return(\r\n        <article>\r\n            <h3>Movie page</h3><br/>\r\n            <input type=\"date\" onChange={selectDate}></input><br/>\r\n            <a href=\"https://www.kobis.or.kr/kobisopenapi/homepg/apiservice/searchServiceInfo.do\" target=\"_blank\" rel=\"noreferrer\" className=\"instruction\">설명서</a>\r\n{/* \r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>응답 필드</th>\r\n                        <th>설명</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>audiAcc</td>\r\n                        <td>누적관객수</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>audiChange</td>\r\n                        <td>전일 대비 관객수 증감 비율</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>audiCnt</td>\r\n                        <td>해당일의 관객수</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>audiInten</td>\r\n                        <td>전일 대비 관객수 증감분</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>movieCd</td>\r\n                        <td>영화의 대표코드</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>movieNm</td>\r\n                        <td>영화명(국문)</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>openDt</td>\r\n                        <td>영화의 개봉일</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rank</td>\r\n                        <td>해당일자의 박스오피스 순위</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rankInten</td>\r\n                        <td>전일대비 순위의 증감분</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rankOldAndNew</td>\r\n                        <td>\r\n                            랭킹에 신규진입여부 <br/> \r\n                            “OLD” : 기존 , “NEW” : 신규\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rnum</td>\r\n                        <td>순번</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesAcc</td>\r\n                        <td>누적매출액</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesAmt</td>\r\n                        <td>해당일의 매출액</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesChange</td>\r\n                        <td>전일 대비 매출액 증감 비율</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesInten</td>\r\n                        <td>전일 대비 매출액 증감분</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesShare</td>\r\n                        <td>\r\n                            해당일자 상영작의 <br/> \r\n                            매출총액 대비 해당 영화의 매출비율\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>scrnCnt</td>\r\n                        <td>해당일자에 상영한 스크린수</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>showCnt</td>\r\n                        <td>해당일자에 상영된 횟수</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n */}\r\n            <MovieList movies={dataArr} date={date}/>\r\n        </article>\r\n    );\r\n}\r\n","// Graph.js\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { ResponsiveBar } from '@nivo/bar';\r\nimport { ResponsivePie } from '@nivo/pie'\r\n\r\nexport default function Graph(){\r\n    const [graphData,setGraphData] = useState(JSON.parse(localStorage.gData));\r\n    const [graphData2,setGraphData2] = useState(JSON.parse(localStorage.gData));\r\n    useEffect(()=>{\r\n        setGraphData(\r\n            graphData.map(function(obj){\r\n                return  {\r\n                    \"country\":obj.movieNm,\r\n                    \"donut\":obj.audiCnt\r\n                };\r\n            })\r\n        );\r\n        setGraphData2(\r\n            graphData2.map(function(obj){\r\n                return {\r\n                    \"id\":obj.movieNm,\r\n                    \"value\":obj.salesShare\r\n                }\r\n            })\r\n        )\r\n    },[localStorage.gData])\r\n    return(\r\n        <article>\r\n            <h3>Graph page</h3>\r\n            <div className=\"contents\">\r\n                <div className=\"graphContainer\" style={{height:'50vw'}}>\r\n                    <ResponsiveBar\r\n                        data={graphData}\r\n                        keys={[ 'hot dog', 'burger', 'sandwich', 'kebab', 'fries', 'donut' ]}\r\n                        indexBy=\"country\"\r\n                        margin={{ top: 50, right: 130, bottom: 50, left: 60 }}\r\n                        padding={0.3}\r\n                        valueScale={{ type: 'linear' }}\r\n                        indexScale={{ type: 'band', round: true }}\r\n                        colors={{ scheme: 'greys' }}\r\n                        defs={[\r\n                            {\r\n                                id: 'dots',\r\n                                type: 'patternDots',\r\n                                background: 'inherit',\r\n                                color: '#38bcb2',\r\n                                size: 4,\r\n                                padding: 1,\r\n                                stagger: true\r\n                            },\r\n                            {\r\n                                id: 'lines',\r\n                                type: 'patternLines',\r\n                                background: 'inherit',\r\n                                color: '#eed312',\r\n                                rotation: -45,\r\n                                lineWidth: 6,\r\n                                spacing: 10\r\n                            }\r\n                        ]}\r\n                        fill={[\r\n                            {\r\n                                match: {\r\n                                    id: 'fries'\r\n                                },\r\n                                id: 'dots'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'sandwich'\r\n                                },\r\n                                id: 'lines'\r\n                            }\r\n                        ]}\r\n                        borderColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                        axisTop={null}\r\n                        axisRight={null}\r\n                        axisBottom={{\r\n                            tickSize: 5,\r\n                            tickPadding: 5,\r\n                            tickRotation: 0,\r\n                            legend: 'title',\r\n                            legendPosition: 'middle',\r\n                            legendOffset: 32\r\n                        }}\r\n                        axisLeft={{\r\n                            tickSize: 5,\r\n                            tickPadding: 5,\r\n                            tickRotation: 0,\r\n                            legend: '관객수',\r\n                            legendPosition: 'middle',\r\n                            legendOffset: -40\r\n                        }}\r\n                        labelSkipWidth={12}\r\n                        labelSkipHeight={12}\r\n                        labelTextColor={{ from: 'color', modifiers: [ [ 'darker', 1.6 ] ] }}\r\n                        legends={[\r\n                            {\r\n                                dataFrom: 'keys',\r\n                                anchor: 'bottom-right',\r\n                                direction: 'column',\r\n                                justify: false,\r\n                                translateX: 120,\r\n                                translateY: 0,\r\n                                itemsSpacing: 2,\r\n                                itemWidth: 100,\r\n                                itemHeight: 20,\r\n                                itemDirection: 'left-to-right',\r\n                                itemOpacity: 0.85,\r\n                                symbolSize: 20,\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemOpacity: 1\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]}\r\n                    />\r\n                    <ResponsivePie\r\n                        data={graphData2}\r\n                        margin={{ top: 40, right: 80, bottom: 80, left: 80 }}\r\n                        innerRadius={0.5}\r\n                        padAngle={0.7}\r\n                        cornerRadius={3}\r\n                        activeOuterRadiusOffset={8}\r\n                        borderWidth={1}\r\n                        borderColor={{ from: 'color', modifiers: [ [ 'darker', 0.2 ] ] }}\r\n                        arcLinkLabelsSkipAngle={10}\r\n                        arcLinkLabelsTextColor=\"#333333\"\r\n                        arcLinkLabelsThickness={2}\r\n                        arcLinkLabelsColor={{ from: 'color' }}\r\n                        arcLabelsSkipAngle={10}\r\n                        arcLabelsTextColor={{ from: 'color', modifiers: [ [ 'darker', 2 ] ] }}\r\n                        defs={[\r\n                            {\r\n                                id: 'dots',\r\n                                type: 'patternDots',\r\n                                background: 'inherit',\r\n                                color: 'rgba(255, 255, 255, 0.3)',\r\n                                size: 4,\r\n                                padding: 1,\r\n                                stagger: true\r\n                            },\r\n                            {\r\n                                id: 'lines',\r\n                                type: 'patternLines',\r\n                                background: 'inherit',\r\n                                color: 'rgba(255, 255, 255, 0.3)',\r\n                                rotation: -45,\r\n                                lineWidth: 6,\r\n                                spacing: 10\r\n                            }\r\n                        ]}\r\n                        fill={[\r\n                            {\r\n                                match: {\r\n                                    id: 'ruby'\r\n                                },\r\n                                id: 'dots'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'c'\r\n                                },\r\n                                id: 'dots'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'go'\r\n                                },\r\n                                id: 'dots'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'python'\r\n                                },\r\n                                id: 'dots'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'scala'\r\n                                },\r\n                                id: 'lines'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'lisp'\r\n                                },\r\n                                id: 'lines'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'elixir'\r\n                                },\r\n                                id: 'lines'\r\n                            },\r\n                            {\r\n                                match: {\r\n                                    id: 'javascript'\r\n                                },\r\n                                id: 'lines'\r\n                            }\r\n                        ]}\r\n                        legends={[\r\n                            {\r\n                                anchor: 'bottom',\r\n                                direction: 'row',\r\n                                justify: false,\r\n                                translateX: 0,\r\n                                translateY: 56,\r\n                                itemsSpacing: 0,\r\n                                itemWidth: 100,\r\n                                itemHeight: 18,\r\n                                itemTextColor: '#999',\r\n                                itemDirection: 'left-to-right',\r\n                                itemOpacity: 1,\r\n                                symbolSize: 18,\r\n                                symbolShape: 'circle',\r\n                                effects: [\r\n                                    {\r\n                                        on: 'hover',\r\n                                        style: {\r\n                                            itemTextColor: '#000'\r\n                                        }\r\n                                    }\r\n                                ]\r\n                            }\r\n                        ]}\r\n                    />\r\n                </div>\r\n            </div>\r\n        </article>\r\n    );\r\n}\r\n","import './App.css';\nimport { React, useState, useEffect } from 'react';\nimport { HashRouter, Switch, Route, Link } from 'react-router-dom'; \nimport Movie from './pages/Movie';\nimport Graph from './pages/Graph';\n\nfunction App() {\n  // document title change\n  const useTitle = (initialTitle) => {\n    const [title, setTitle] = useState(initialTitle);\n    const updateTitle = () => {\n      const htmlTitle = document.querySelector(\"title\");\n      htmlTitle.innerText = title;\n    };\n    useEffect(updateTitle, [title])\n    return setTitle;\n  };\n\n  const titleUpdater = useTitle(\"Loading...\");\n  setTimeout(() => titleUpdater(\"Movie\"), 500);\n\n  return (\n    <HashRouter>\n      <header>\n        <nav>\n          <Link to=\"/\">Movie</Link>\n          <Link to=\"/Graph\">Graph</Link>\n        </nav>\n      </header>\n      <Switch>\n        <Route exact path=\"/\"> <Movie /> </Route>\n        <Route path=\"/Graph\"> <Graph /> </Route>\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}