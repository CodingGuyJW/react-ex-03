{"version":3,"sources":["pages/MovieList.js","pages/Movie.js","pages/Graph.js","pages/Main.js","App.js","reportWebVitals.js","index.js"],"names":["MovieList","movies","date","className","map","rank","movieNm","audiCnt","salesAmt","movieCd","Movie","useState","setDate","dataArr","setDataArr","useEffect","axios","get","then","response","data","boxOfficeResult","dailyBoxOfficeList","catch","error","console","log","value","type","onChange","e","ymd","target","split","href","rel","Graph","Main","App","to","exact","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"oQAEe,SAASA,EAAT,GAAqC,IAAhBC,EAAe,EAAfA,OAAQC,EAAO,EAAPA,KACxC,OACI,qCACI,kDAAqBA,EAArB,OACA,wBAAOC,UAAU,iBAAjB,UACI,gCACI,+BACI,2DACA,0DACA,iEACA,sEAGR,gCACKF,EAAOG,KAAI,SAAAH,GACR,OACI,+BACI,6BAAKA,EAAOI,OACZ,6BAAKJ,EAAOK,UACZ,6BAAKL,EAAOM,UACZ,6BAAKN,EAAOO,aAJPP,EAAOQ,oBCb7B,SAASC,IACpB,MAAwBC,mBAAS,YAAjC,mBAAOT,EAAP,KAAaU,EAAb,KACA,EAA6BD,mBAAS,IAAtC,mBAAOE,EAAP,KAAeC,EAAf,KAsBA,OAfAC,qBAAU,WACNC,IAAMC,IAAI,8IAA8If,GACnJgB,MAAK,SAAAC,GACFL,EAAWK,EAASC,KAAKC,gBAAgBC,uBAE5CC,OAAM,SAAUC,SAIrB,CAACtB,IAELa,qBAAU,WACNU,QAAQC,IAAIb,KACd,CAACA,IAGC,oCACI,4CAAmB,uBACnB,uBAAOc,MAAM,aAAaC,KAAK,OAAOC,SAvB9C,SAAoBC,GAChB,IAAIC,EAAID,EAAEE,OAAOL,MAAMM,MAAM,KAC7BrB,EAAQmB,EAAI,GAAGA,EAAI,GAAGA,EAAI,OAqB8C,uBACpE,mBAAGG,KAAK,8EAA8EF,OAAO,SAASG,IAAI,aAAahC,UAAU,cAAjI,gCACA,kCACI,gCACI,+BACI,2DACA,mDAGR,kCACI,+BACI,yCACA,mEAEJ,+BACI,4CACA,2GAEJ,+BACI,yCACA,gFAEJ,+BACI,2CACA,oGAEJ,+BACI,yCACA,gFAEJ,+BACI,yCACA,qEAEJ,+BACI,wCACA,0EAEJ,+BACI,sCACA,+GAEJ,+BACI,2CACA,mGAEJ,+BACI,+CACA,0FACe,uBADf,wEAKJ,+BACI,sCACA,iDAEJ,+BACI,0CACA,mEAEJ,+BACI,0CACA,gFAEJ,+BACI,6CACA,2GAEJ,+BACI,4CACA,oGAEJ,+BACI,4CACA,oFACc,uBADd,uGAKJ,+BACI,yCACA,+GAEJ,+BACI,yCACA,yGAIZ,cAACH,EAAD,CAAWC,OAAQY,EAASX,KAAMA,OCxH/B,SAASkC,IACpB,OACI,4CCFO,SAASC,IACpB,OAAQ,2CCuBGC,MAnBf,WACE,OACE,eAAC,IAAD,WACE,iCACE,gCACE,cAAC,IAAD,CAAMC,GAAG,IAAT,kBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,mBACA,cAAC,IAAD,CAAMA,GAAG,SAAT,wBAGJ,eAAC,IAAD,WACE,eAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAlB,cAAuB,cAACJ,EAAD,IAAvB,OACA,eAAC,IAAD,CAAOI,KAAK,SAAZ,cAAsB,cAAC/B,EAAD,IAAtB,OACA,eAAC,IAAD,CAAO+B,KAAK,SAAZ,cAAsB,cAACL,EAAD,IAAtB,cCROM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB1B,MAAK,YAAkD,IAA/C2B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f9a9426f.chunk.js","sourcesContent":["// MovieList.js\r\n\r\nexport default function MovieList({ movies, date }){\r\n    return( \r\n        <>\r\n            <h3>MovieList Page ({date})</h3>\r\n            <table className=\"movieListTable\">\r\n                <thead>\r\n                    <tr>\r\n                        <th>당일 순위</th>\r\n                        <th>영화제목</th>\r\n                        <th>당일 관객수</th>\r\n                        <th>당일 매출액</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {movies.map(movies => {\r\n                        return(\r\n                            <tr key={movies.movieCd}>\r\n                                <td>{movies.rank}</td>\r\n                                <td>{movies.movieNm}</td>\r\n                                <td>{movies.audiCnt}</td>\r\n                                <td>{movies.salesAmt}</td>\r\n                            </tr>\r\n                        );\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n    );\r\n}\r\n","// Movie.js\r\nimport { useState, useEffect } from \"react\";\r\nimport axios from 'axios'; \r\nimport MovieList from \"./MovieList\";\r\n\r\nexport default function Movie(){\r\n    const [date, setDate] = useState('20210901');\r\n    const [dataArr,setDataArr] = useState([]);\r\n\r\n    function selectDate(e){\r\n        let ymd=e.target.value.split(\"-\");\r\n        setDate(ymd[0]+ymd[1]+ymd[2]);\r\n    }\r\n\r\n    useEffect(()=>{\r\n        axios.get('https://www.kobis.or.kr/kobisopenapi/webservice/rest/boxoffice/searchDailyBoxOfficeList.json?key=cad9be1865105b37c7878f3391f806e8&targetDt='+date)\r\n            .then(response=>{\r\n                setDataArr(response.data.boxOfficeResult.dailyBoxOfficeList)\r\n            })\r\n            .catch(function (error) {\r\n                // 오류발생시 실행\r\n                // https://wonit.tistory.com/305\r\n            })\r\n    },  [date]);\r\n\r\n    useEffect(()=>{\r\n        console.log(dataArr)\r\n    },[dataArr])\r\n\r\n    return(\r\n        <article>\r\n            <h3>Movie page</h3><br/>\r\n            <input value=\"2021-09-01\" type=\"date\" onChange={selectDate}></input><br/>\r\n            <a href=\"https://www.kobis.or.kr/kobisopenapi/homepg/apiservice/searchServiceInfo.do\" target=\"_blank\" rel=\"noreferrer\" className=\"instruction\">설명서</a>\r\n            <table>\r\n                <thead>\r\n                    <tr>\r\n                        <th>응답 필드</th>\r\n                        <th>설명</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <td>audiAcc</td>\r\n                        <td>누적관객수</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>audiChange</td>\r\n                        <td>전일 대비 관객수 증감 비율</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>audiCnt</td>\r\n                        <td>해당일의 관객수</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>audiInten</td>\r\n                        <td>전일 대비 관객수 증감분</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>movieCd</td>\r\n                        <td>영화의 대표코드</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>movieNm</td>\r\n                        <td>영화명(국문)</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>openDt</td>\r\n                        <td>영화의 개봉일</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rank</td>\r\n                        <td>해당일자의 박스오피스 순위</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rankInten</td>\r\n                        <td>전일대비 순위의 증감분</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rankOldAndNew</td>\r\n                        <td>\r\n                            랭킹에 신규진입여부 <br/> \r\n                            “OLD” : 기존 , “NEW” : 신규\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>rnum</td>\r\n                        <td>순번</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesAcc</td>\r\n                        <td>누적매출액</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesAmt</td>\r\n                        <td>해당일의 매출액</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesChange</td>\r\n                        <td>전일 대비 매출액 증감 비율</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesInten</td>\r\n                        <td>전일 대비 매출액 증감분</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>salesShare</td>\r\n                        <td>\r\n                            해당일자 상영작의 <br/> \r\n                            매출총액 대비 해당 영화의 매출비율\r\n                        </td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>scrnCnt</td>\r\n                        <td>해당일자에 상영한 스크린수</td>\r\n                    </tr>\r\n                    <tr>\r\n                        <td>showCnt</td>\r\n                        <td>해당일자에 상영된 횟수</td>\r\n                    </tr>\r\n                </tbody>\r\n            </table>\r\n            <MovieList movies={dataArr} date={date}/>\r\n        </article>\r\n    );\r\n}\r\n","// Graph.js\r\n\r\nexport default function Graph(){\r\n    return(\r\n        <h3>Graph page</h3>\r\n    );\r\n}","// Main.js\r\n\r\nexport default function Main(){\r\n    return( <h3>Main Page</h3>);\r\n}\r\n","import './App.css';\nimport React from 'react';\nimport { BrowserRouter, Switch, Route, Link } from 'react-router-dom'; \nimport Movie from './pages/Movie';\nimport Graph from './pages/Graph';\nimport Main from './pages/Main';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <header>\n        <nav>\n          <Link to=\"/\">Home</Link>\n          <Link to=\"/Movie\">Movie</Link>\n          <Link to=\"/Graph\">Graph</Link>\n        </nav>\n      </header>\n      <Switch>\n        <Route exact path=\"/\"> <Main /> </Route>\n        <Route path=\"/Movie\"> <Movie /> </Route>\n        <Route path=\"/Graph\"> <Graph /> </Route>\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}